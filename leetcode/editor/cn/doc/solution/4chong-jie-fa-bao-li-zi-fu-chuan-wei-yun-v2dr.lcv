### 解题思路

解法1： 简单的for循环，不多描述。
解法2： 针对大数问题n，无法通过Math.pow得出的情况下，我们找到规律，知道n代表位数，然后就可以得出max值为m个'9'的组合。然后for循环。
解法3： 位运算。通过位运算得出max值，然后循环。位运算的原理很多题解都有写，就不赘述了。
解法4： DFS - 重点讲讲这个，暂时没看到有JS的DFS写法，分享一下。
1. 对于dfs()的定义，确定两个变量，一个是首位数字i，第二个是当前数位m。首位数字i的范围是[1, 9]，位数的范围是[1, n]。所以首先是
两个循环来call dfs()方法。
2. 在dfs内部，结束条件为当字符串长度达到当前的位数，把当前字符串push到res数组中，return，结束dfs。
3. 关于dfs内部的loop ['0' - '9']，代表了第二/三/..位，所以范围是[0, 10]。
4. 关键在于结束dfs()递归后，记得把计算过得的末尾移除，这里使用的是slice(0, -1)来移除末尾。如果不移除，那么例如'10'计算过了，不把'0'移除，
我们就会得到'101'而不是我们想要的'11'，作为下一个输入。

希望能帮到大家~~~

### 代码

* javascript

```javascript
// solution 1: brute force
/**
 * @param {number} n
 * @return {number[]}
 */
var printNumbers = function (n) {
    let res = [];
    for (let i = 1; i < Math.pow(10, n); i++) {
        res.push(i);
    }
    return res;
};

// solution 2: using string to solve this problem for BigInt
var printNumbers = function (n) {
    let max = '';
    while (n--) {
        // will get the maxNumber of string type -> '9'/'99'/'999'/'9..9' -> this will avoid the bigInt issue
        max += '9';
    }

    for (let i = 1, l = max - '0'; i <= l; i++) res.push(i);
};

// solution 3: bit operation
var printNumbers = function (n) {
    let max = 1, x = 10;
    while (n) {
        if (n & 1) {
            max = max * x;
        }
        x *= x;
        n >>= 1;
    }
    let res = [];
    for (let i = 1; i < max; i++) {
        res.push(i);
    }
    return res;
}

// solution 4: DFS
var printNumbers = function (n) {
    let res = [];

    var dfs = function (stringOfNumber, lengthOfBit) {
        if (stringOfNumber.length == lengthOfBit) {
            res.push(stringOfNumber);
            return;
        }
        for (let i = '0'; i <= '9'; i++) {
            stringOfNumber += i.toString();
            dfs(stringOfNumber, lengthOfBit);
            // remove the last digit after using it
            stringOfNumber = stringOfNumber.slice(0,-1);
        }
    }

    for (let m = 1; m <= n; m++) {
        for (let i = '1'; i <= '9'; i++) {
            dfs(i.toString(), m);
        }
    }

    return res;
}
```

